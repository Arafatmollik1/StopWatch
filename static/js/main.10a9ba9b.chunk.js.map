{"version":3,"sources":["Components/Title/Title.js","Components/CountDown/Digit/Digit.js","Components/CountDown/CountDown.js","Components/Controller/Controller.js","Components/Laps/Laps.js","Components/App.js","serviceWorker.js","index.js"],"names":["Title","props","state","title","isInput","this","setState","event","target","value","key","output","className","onChange","inputChange","onKeyPress","keyPressHandler","onBlur","blurHandler","type","onClick","editHandler","aria-hidden","Component","Digit","style","borderColor","color","CountDown","time","min","sec","mili","Controller","start","pause","lap","reset","startHandler","pauseHandler","lapHandler","resetHandler","getController","Laps","laps","map","index","App","intervalID","setInterval","clearInterval","console","log","getStart","getPause","getReset","getLap","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10a9ba9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Title.css'\r\n\r\nclass Title extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: 'Made By Arafat Mollik',\r\n            isInput: false\r\n        }\r\n    }\r\neditHandler(){\r\n    this.setState({\r\n        ...this.state,\r\n        isInput:true\r\n\r\n    })\r\n}\r\ninputChange(event){\r\n    this.setState({\r\n        ...this.state,\r\n        title: event.target.value\r\n    })\r\n}\r\nkeyPressHandler(event){\r\n    if(event.key === 'Enter'){\r\n        this.setState({\r\n            ...this.state,\r\n            isInput: false\r\n        })\r\n    }\r\n}\r\nblurHandler(event){\r\n    this.setState({\r\n        ...this.state,\r\n        isInput: false\r\n    })\r\n}\r\n    render() {\r\n        let output = null;\r\n        if (this.state.isInput) {\r\n            output= (\r\n                <div className=\"Tile\">\r\n                    <input className=\"form-control\"\r\n                      onChange={event => this.inputChange(event)}\r\n                      onKeyPress={event=> this.keyPressHandler(event)}\r\n                      onBlur={event => this.blurHandler(event)}\r\n                      type=\"text\" value= {this.state.title}/>\r\n                </div>\r\n            )\r\n\r\n        }\r\n        else {\r\n            output = (\r\n                <div className=\"d-flex Title\">\r\n                    <h1 className=\"display-4\"> {this.state.title} </h1>\r\n                    <span onClick={ ()=>this.editHandler() } className=\"ml-auto edit-icon\">\r\n                        <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n\r\n\r\n                    </span>\r\n                </div>\r\n                )\r\n        }\r\n        return (\r\n            <div>\r\n                {output}\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Title","import React from 'react'\r\nimport './Digit.css'\r\nconst Digit= (props) => {\r\n    return(\r\n        <div className=\"Digit mx-3 text-center\" style={{borderColor: props.color}}>\r\n            <h1 className=\"display-2 py-3\" style= {{color: props.color}}>{props.value < 10 ? `0${props.value}` : props.value}</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Digit","import React from 'react'\r\nimport Digit from './Digit/Digit.js'\r\n\r\nconst CountDown= (props) => {\r\n    return(\r\n        <div className=\"d-flex my-4\">\r\n            <Digit color=\"palegreen\" value={props.time.min}/>\r\n            <Digit color= \"skyblue\" value={props.time.sec}/>\r\n            <Digit color=\"salmon\"value={props.time.mili}/>\r\n        </div>\r\n    )\r\n}\r\nexport default CountDown","import React, {Component} from 'react';\r\nclass Controller extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state= {\r\n            start: true,\r\n            pause:false,\r\n            lap:false,\r\n            reset: false\r\n        }\r\n    }\r\n    startHandler(){\r\n        this.setState({\r\n            ...this.state,\r\n            start: false,\r\n            pause:true,\r\n            lap:true,\r\n        })\r\n        this.props.start()\r\n    }\r\n    pauseHandler(){\r\n        this.setState({\r\n            ...this.state,\r\n            start: true,\r\n            pause:false,\r\n            lap:false,\r\n            reset:true\r\n    })\r\n    this.props.pause()\r\n}\r\n    lapHandler(){\r\n        this.props.lap()\r\n    }\r\n    resetHandler(){\r\n        this.setState({\r\n            start: true,\r\n            \r\n            pause:false,\r\n            lap:false,\r\n            reset: false\r\n    })\r\n    this.props.reset()\r\n}\r\n\r\n    getController(){\r\n        let output= null;\r\n        if(this.state.start && !this.state.reset){\r\n            output=(\r\n                <div>\r\n                    <button className=\"btn btn-success btn-lg px-5 ml-5\"\r\n                    onClick={event => this.startHandler()}>Start</button>\r\n                </div>\r\n            )\r\n        } else if(this.state.pause && this.state.lap){\r\n           output=( <div>\r\n                 <button className=\"btn btn-primary btn-lg px-5 ml-5\"\r\n                    onClick={event => this.pauseHandler()}>Pause</button>\r\n                     <button className=\"btn btn-warning btn-lg px-5 ml-5\"\r\n                    onClick={event => this.lapHandler()}>Lap</button>\r\n            </div>\r\n            ) } else if(this.state.start && this.state.reset){\r\n                output=(\r\n                    <div>\r\n                        <button className=\"btn btn-success btn-lg px-5 ml-5\"\r\n                        onClick={event => this.startHandler()}>Start</button>\r\n                         <button className=\"btn btn-danger btn-lg px-5 ml-5\"\r\n                        onClick={event => this.resetHandler()}>Reset</button>\r\n                    </div>\r\n                )\r\n            } \r\n        \r\n        return output\r\n    }\r\n    render(){\r\n        return this.getController()\r\n    }\r\n}\r\n\r\nexport default Controller","import React from 'react';\r\n\r\nconst Laps= (props) => {\r\n    return(\r\n        <ul className= \"list-group list-group-flush\">\r\n            {props.laps.map((lap,index)=>{\r\n                return(\r\n                    <li key={index} className=\"list-group-item\">\r\n                        <h3>\r\n                        <span className=\"text-dark\">Minute: </span>\r\n                        <span className=\"text-danger\">{lap.min}</span>\r\n                        <span className=\"text-dark\">Seconds: </span>\r\n                        <span className=\"text-danger\">{lap.sec}</span>\r\n                        <span className=\"text-dark\">Mili: </span>\r\n                        <span className=\"text-danger\">{lap.mili}</span>\r\n                        </h3>\r\n                    </li>\r\n                )\r\n            }\r\n\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\nexport default Laps","import React, {Component} from 'react';\nimport './App.css';\nimport Title from './Title/Title'\nimport CountDown from './CountDown/CountDown'\nimport Controller from './Controller/Controller'\nimport Laps from './Laps/Laps'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      time: {\n        min: 0,\n        sec: 0,\n        mili:0 \n      },\n      laps: []\n    }\n  }\n  getStart(){\n    this.intervalID= setInterval(()=>{\n      let min = this.state.time.min\n      let sec= this.state.time.sec\n      let mili= this.state.time.mili\n      if(mili>=10){\n        sec+=1 \n        mili=0\n      }\n      if(mili>=60){\n        min+=1 \n        sec=0\n      }\n      this.setState({\n        ...this.state,\n        time: {\n        min,\n        sec,\n        mili:  mili +1\n        }\n      })\n    },100)\n  }\n  getPause(){\n    clearInterval(this.intervalID)\n  }\n  getLap(){\n    let time={\n      ...this.state.time\n\n    }\n    this.setState({\n      ...this.state,\n      laps: [time, ...this.state.laps]\n    })\n    console.log(this.state.laps)\n  }\n  getReset(){\n    this.setState({\n      time: {\n        min: 0,\n        sec: 0,\n        mili:0 \n      },\n      laps: []\n    })\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"container py-5\">\n       \n       <div className=\"row\">\n          <div className=\"col-sm-8 offset-sm-2\">\n            <Title />\n            <CountDown time= {this.state.time}/>\n            <Controller start={()=> this.getStart()} \n            pause={()=> this.getPause()}\n            reset= {()=> this.getReset()}\n            lap= {()=> this.getLap()}\n            />\n            <Laps className=\"my-5\" laps= {this.state.laps}/>\n          </div>\n       </div>\n      </div>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}